{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport XLSX from 'xlsx';\nimport { sel_stu } from '../../config/component/StuTable';\nexport default (function (store) {\n  var excel;\n\n  var parseToExcel = function parseToExcel() {\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet([sel_stu].concat(_toConsumableArray(store.infoList.stu_table))), 'Sheet1');\n    return wb;\n  };\n\n  try {\n    excel = parseToExcel();\n  } catch (error) {\n    window.showToast(error);\n    return;\n  }\n\n  XLSX.writeFile(excel, \"\\u8003\\u8BD5\\u5B66\\u751F\\u8868.xls\");\n});","map":{"version":3,"sources":["C:\\Users\\sunli\\Documents\\GitHub\\Theory-Exam\\code\\client\\src\\api\\excel\\loadoutStudent.js"],"names":["XLSX","sel_stu","store","excel","parseToExcel","wb","utils","book_new","book_append_sheet","aoa_to_sheet","infoList","stu_table","error","window","showToast","writeFile"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,QAAwB,iCAAxB;AAEA,gBAAe,UAAAC,KAAK,EAAI;AACtB,MAAIC,KAAJ;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIC,EAAE,GAAGL,IAAI,CAACM,KAAL,CAAWC,QAAX,EAAT;AACAP,IAAAA,IAAI,CAACM,KAAL,CAAWE,iBAAX,CAA6BH,EAA7B,EAAiCL,IAAI,CAACM,KAAL,CAAWG,YAAX,EAEzBR,OAFyB,4BAGtBC,KAAK,CAACQ,QAAN,CAAeC,SAHO,GAAjC,EAII,QAJJ;AAKA,WAAON,EAAP;AACD,GARD;;AAUA,MAAI;AACFF,IAAAA,KAAK,GAAGC,YAAY,EAApB;AACD,GAFD,CAEE,OAAMQ,KAAN,EAAY;AACZC,IAAAA,MAAM,CAACC,SAAP,CAAiBF,KAAjB;AACA;AACD;;AACDZ,EAAAA,IAAI,CAACe,SAAL,CAAeZ,KAAf;AACD,CAnBD","sourcesContent":["import XLSX from 'xlsx'\r\nimport { sel_stu } from '../../config/component/StuTable'\r\n\r\nexport default store => {\r\n  let excel\r\n  const parseToExcel = () => {\r\n    let wb = XLSX.utils.book_new()\r\n    XLSX.utils.book_append_sheet(wb, XLSX.utils.aoa_to_sheet(\r\n        [\r\n            sel_stu,\r\n            ...store.infoList.stu_table\r\n    ]), 'Sheet1')\r\n    return wb\r\n  }\r\n\r\n  try {\r\n    excel = parseToExcel()\r\n  } catch(error){\r\n    window.showToast(error)\r\n    return\r\n  }\r\n  XLSX.writeFile(excel, `考试学生表.xls`)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}