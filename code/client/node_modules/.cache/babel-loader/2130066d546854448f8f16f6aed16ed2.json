{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { get } from '../../utils/request';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(store, paper_id) {\n    var res, chart;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return get('api/histogram', {\n              paper_id: paper_id\n            });\n\n          case 2:\n            res = _context.sent;\n\n            if (res) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            chart = res.histogram.map(function (count, i) {\n              return {\n                score: \"\".concat(i * 25, \"~\").concat((i + 1) * 25),\n                count: count\n              };\n            });\n            store.infoList.paper_detail = _objectSpread({}, res, {\n              chart: chart\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["C:\\Users\\sunli\\Documents\\GitHub\\Theory-Exam\\code\\client\\src\\api\\expaper\\datum.js"],"names":["get","store","paper_id","res","chart","histogram","map","count","i","score","infoList","paper_detail"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,qBAApB;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGF,GAAG,CAAC,eAAD,EAAkB;AAAEE,cAAAA,QAAQ,EAARA;AAAF,aAAlB,CADN;;AAAA;AACTC,YAAAA,GADS;;AAAA,gBAERA,GAFQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGTC,YAAAA,KAHS,GAGDD,GAAG,CAACE,SAAJ,CAAcC,GAAd,CAAkB,UAACC,KAAD,EAAQC,CAAR;AAAA,qBAAe;AAAEC,gBAAAA,KAAK,YAAKD,CAAC,GAAG,EAAT,cAAe,CAACA,CAAC,GAAG,CAAL,IAAU,EAAzB,CAAP;AAAsCD,gBAAAA,KAAK,EAALA;AAAtC,eAAf;AAAA,aAAlB,CAHC;AAIbN,YAAAA,KAAK,CAACS,QAAN,CAAeC,YAAf,qBAAkCR,GAAlC;AAAsCC,cAAAA,KAAK,EAALA;AAAtC;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { get } from '../../utils/request'\r\n\r\nexport default async (store, paper_id) => {\r\n  let res = await get('api/histogram', { paper_id })\r\n  if (!res) return\r\n  let chart = res.histogram.map((count, i) => ({ score: `${i * 25}~${(i + 1) * 25}`, count }))\r\n  store.infoList.paper_detail = {...res,chart}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}