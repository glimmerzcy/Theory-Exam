{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\src\\\\utils\\\\MathCAPTCHA\\\\MathCAPTCHA.jsx\";\nimport React from 'react';\nimport { BlockMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\nimport './MathCAPTCHA.css';\n\nvar random = function random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nvar data = new Array(5).fill(0);\nvar seed = 0;\n\nfunction _newFormula() {\n  data = data.map(function (i) {\n    return random(1, 5);\n  });\n\n  var _data = data,\n      _data2 = _slicedToArray(_data, 5),\n      a = _data2[0],\n      b = _data2[1],\n      k1 = _data2[2],\n      k2 = _data2[3],\n      k3 = _data2[4];\n\n  return \"\".concat(a, \"\\\\times\").concat(k1, \"+\").concat(k2, \"-\").concat(k3, \"=?\");\n}\n\nfunction getResult() {\n  var _data3 = data,\n      _data4 = _slicedToArray(_data3, 5),\n      a = _data4[0],\n      b = _data4[1],\n      k1 = _data4[2],\n      k2 = _data4[3],\n      k3 = _data4[4];\n\n  return a * k1 + k2 - k3;\n}\n\nvar MathCAPTCHA =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MathCAPTCHA, _React$Component);\n\n  function MathCAPTCHA(props) {\n    var _this;\n\n    _classCallCheck(this, MathCAPTCHA);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MathCAPTCHA).call(this, props));\n    _this.state = {\n      formula: _newFormula()\n    };\n    _this.onChanged = _this.onChanged.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newFormula = _this.newFormula.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MathCAPTCHA, [{\n    key: \"onChanged\",\n    value: function onChanged(e) {\n      if (e.target.value == getResult()) this.props.onCorrect();\n    }\n  }, {\n    key: \"newFormula\",\n    value: function newFormula() {\n      var formula = _newFormula();\n\n      this.setState({\n        formula: formula\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.seed != seed) {\n        seed = this.props.seed;\n        this.newFormula();\n      }\n\n      return React.createElement(\"div\", {\n        className: \"captcha-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.newFormula,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.state.formula), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"\\u4E0D\\u4F1A\\u505A\\uFF1F\\u70B9\\u51FB\\u6362\\u4E00\\u4E2A\")), React.createElement(\"div\", {\n        className: \"row center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"\\u9A8C\\u8BC1\\u4FE1\\u606F:\"), React.createElement(\"input\", {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u8BA1\\u7B97\\u7ED3\\u679C\",\n        onChange: this.onChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MathCAPTCHA;\n}(React.Component);\n\nexport default MathCAPTCHA;","map":{"version":3,"sources":["C:\\Users\\sunli\\Documents\\GitHub\\Theory-Exam\\code\\client\\src\\utils\\MathCAPTCHA\\MathCAPTCHA.jsx"],"names":["React","BlockMath","random","min","max","Math","floor","data","Array","fill","seed","newFormula","map","i","a","b","k1","k2","k3","getResult","MathCAPTCHA","props","state","formula","onChanged","bind","e","target","value","onCorrect","setState","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,0BAAP;AACA,OAAO,mBAAP;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,MAAL,MAAiBE,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAd;AAAA,CAAf;;AAEA,IAAII,IAAI,GAAG,IAAIC,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,CAAlB,CAAX;AACA,IAAIC,IAAI,GAAG,CAAX;;AAEA,SAASC,WAAT,GAAsB;AACpBJ,EAAAA,IAAI,GAAGA,IAAI,CAACK,GAAL,CAAS,UAAAC,CAAC;AAAA,WAAIX,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAV;AAAA,GAAV,CAAP;;AADoB,cAEKK,IAFL;AAAA;AAAA,MAEfO,CAFe;AAAA,MAEZC,CAFY;AAAA,MAETC,EAFS;AAAA,MAELC,EAFK;AAAA,MAEDC,EAFC;;AAGlB,mBAAUJ,CAAV,oBAAqBE,EAArB,cAA2BC,EAA3B,cAAiCC,EAAjC;AACH;;AAED,SAASC,SAAT,GAAqB;AAAA,eACMZ,IADN;AAAA;AAAA,MACdO,CADc;AAAA,MACXC,CADW;AAAA,MACRC,EADQ;AAAA,MACJC,EADI;AAAA,MACAC,EADA;;AAEjB,SAAOJ,CAAC,GAAGE,EAAJ,GAASC,EAAT,GAAcC,EAArB;AACH;;IAEKE,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAEZ,WAAU;AAArB,KAAb;AACA,UAAKa,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKd,UAAL,GAAkB,MAAKA,UAAL,CAAgBc,IAAhB,uDAAlB;AAJiB;AAKlB;;;;8BACSC,C,EAAG;AACX,UAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBT,SAAS,EAA/B,EACE,KAAKE,KAAL,CAAWQ,SAAX;AACH;;;iCACY;AACX,UAAIN,OAAO,GAAGZ,WAAU,EAAxB;;AACA,WAAKmB,QAAL,CAAc;AAAEP,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACD;;;6BACQ;AACP,UAAI,KAAKF,KAAL,CAAWX,IAAX,IAAmBA,IAAvB,EAA6B;AAC3BA,QAAAA,IAAI,GAAG,KAAKW,KAAL,CAAWX,IAAlB;AACA,aAAKC,UAAL;AACD;;AACD,aACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,OAAO,EAAE,KAAKA,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAY,KAAKW,KAAL,CAAWC,OAAvB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAFF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAEE;AAAO,QAAA,WAAW,EAAC,4CAAnB;AAA6B,QAAA,QAAQ,EAAE,KAAKC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CALF,CADF;AAYD;;;;EAhCuBxB,KAAK,CAAC+B,S;;AAmChC,eAAeX,WAAf","sourcesContent":["import React from 'react'\r\nimport { BlockMath } from 'react-katex'\r\nimport 'katex/dist/katex.min.css'\r\nimport './MathCAPTCHA.css'\r\n\r\nconst random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\r\n\r\nlet data = new Array(5).fill(0)\r\nlet seed = 0\r\n\r\nfunction newFormula() {\r\n  data = data.map(i => random(1, 5))\r\n  let [a, b, k1, k2, k3] = data\r\n    return `${a}\\\\times${k1}+${k2}-${k3}=?`\r\n}\r\n\r\nfunction getResult() {\r\n  let [a, b, k1, k2, k3] = data\r\n    return a * k1 + k2 - k3\r\n}\r\n\r\nclass MathCAPTCHA extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { formula: newFormula() }\r\n    this.onChanged = this.onChanged.bind(this)\r\n    this.newFormula = this.newFormula.bind(this)\r\n  }\r\n  onChanged(e) {\r\n    if (e.target.value == getResult())\r\n      this.props.onCorrect()\r\n  }\r\n  newFormula() {\r\n    let formula = newFormula()\r\n    this.setState({ formula })\r\n  }\r\n  render() {\r\n    if (this.props.seed != seed) {\r\n      seed = this.props.seed\r\n      this.newFormula()\r\n    }\r\n    return (\r\n      <div className='captcha-container'>\r\n        <div onClick={this.newFormula}>\r\n          <BlockMath>{this.state.formula}</BlockMath>\r\n          <p>不会做？点击换一个</p>\r\n        </div>\r\n        <div className='row center'>\r\n          <span>验证信息:</span>\r\n          <input placeholder='请输入计算结果' onChange={this.onChanged} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MathCAPTCHA"]},"metadata":{},"sourceType":"module"}