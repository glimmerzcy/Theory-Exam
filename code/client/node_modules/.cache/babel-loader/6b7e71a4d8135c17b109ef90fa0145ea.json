{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\sunli\\\\Documents\\\\GitHub\\\\Theory-Exam\\\\code\\\\client\\\\src\\\\utils\\\\request.js\";\nimport React from 'react'; // export const BASE_URL = 'https://theory.twt.edu.cn'\n\nexport var BASE_URL = 'https://localhost:8000';\nvar defaultGET = {\n  method: 'GET',\n  credentials: 'include'\n};\nvar networkError = React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"\\u7F51\\u7EDC\\u5F02\\u5E38\"), React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, \"\\u8BF7\\u7A0D\\u540E\\u518D\\u8BD5\"), React.createElement(\"small\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, \"Pray for our server solemnly\"));\n\nfunction toString(obj) {\n  var s = [];\n  Object.keys(obj).forEach(function (i) {\n    return s.push(\"\".concat(i, \"=\").concat(obj[i]));\n  });\n  return s.join('&');\n}\n\nfunction request(_x, _x2, _x3) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, setting, isJSON) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(url, setting);\n\n          case 3:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!(res.status >= 500)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error(res.status + \": 请换成校园网再试试呢\");\n\n          case 7:\n            throw res.status;\n\n          case 8:\n            if (!isJSON) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 11;\n            return res.json();\n\n          case 11:\n            res = _context.sent;\n\n          case 12:\n            if (res.error_code) {\n              window.showToast(res.message);\n            }\n\n            return _context.abrupt(\"return\", res);\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (!(window.iwType() === 'loading')) {\n              _context.next = 28;\n              break;\n            }\n\n            _context.next = 21;\n            return window.waitIW();\n\n          case 21:\n            _context.t1 = window.iwType() === 'loading';\n\n            if (!_context.t1) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 25;\n            return window.hideLoading();\n\n          case 25:\n            _context.next = 27;\n            return window.showModal({\n              view: networkError\n            });\n\n          case 27:\n            return _context.abrupt(\"return\");\n\n          case 28:\n            throw _context.t0;\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 16]]);\n  }));\n  return _request.apply(this, arguments);\n}\n\nexport function get(_x4, _x5) {\n  return _get.apply(this, arguments);\n}\n\nfunction _get() {\n  _get = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(targetURL, params) {\n    var isJSON,\n        url,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            isJSON = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : true;\n            url = \"\".concat(BASE_URL, \"/\").concat(targetURL);\n            params && (url += \"?\".concat(toString(params)));\n            console.log('get', url);\n            _context2.next = 6;\n            return request(url, defaultGET, isJSON);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _get.apply(this, arguments);\n}\n\nexport function post(_x6) {\n  return _post.apply(this, arguments);\n} //bind to window for test\n\nfunction _post() {\n  _post = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(targetURL) {\n    var params,\n        isJSON,\n        url,\n        setting,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            params = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            isJSON = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n            url = \"\".concat(BASE_URL, \"/\").concat(targetURL);\n            console.log('post', url, params);\n            setting = {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include',\n              body: JSON.stringify(params)\n            };\n            _context3.next = 7;\n            return request(url, setting, isJSON);\n\n          case 7:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _post.apply(this, arguments);\n}\n\nwindow.get = get;\nwindow.post = post;","map":{"version":3,"sources":["C:\\Users\\sunli\\Documents\\GitHub\\Theory-Exam\\code\\client\\src\\utils\\request.js"],"names":["React","BASE_URL","defaultGET","method","credentials","networkError","toString","obj","s","Object","keys","forEach","i","push","join","request","url","setting","isJSON","fetch","res","ok","status","Error","json","error_code","window","showToast","message","iwType","waitIW","hideLoading","showModal","view","get","targetURL","params","console","log","post","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\n// export const BASE_URL = 'https://theory.twt.edu.cn'\r\nexport const BASE_URL = 'https://localhost:8000'\r\n\r\nconst defaultGET = {\r\n    method: 'GET',\r\n    credentials: 'include'\r\n}\r\n\r\nconst networkError =\r\n    <>\r\n        <h1>网络异常</h1>\r\n        <p>请稍后再试</p>\r\n        <small>Pray for our server solemnly</small>\r\n    </>\r\n\r\nfunction toString(obj) {\r\n    let s = []\r\n    Object.keys(obj).forEach(i => s.push(`${i}=${obj[i]}`))\r\n    return s.join('&')\r\n}\r\n\r\nasync function request(url, setting, isJSON) {\r\n    try {\r\n        let res = await fetch(url, setting)\r\n        if (!res.ok) {\r\n            if (res.status >= 500) {\r\n                throw new Error(res.status + \": 请换成校园网再试试呢\")\r\n            }\r\n            throw res.status\r\n        }\r\n        if (isJSON) res = await res.json()\r\n        if (res.error_code) {\r\n            window.showToast(res.message)\r\n        }\r\n        return res\r\n    } catch (error) {\r\n        if (window.iwType() === 'loading') {\r\n            await window.waitIW()\r\n            window.iwType() === 'loading' && await window.hideLoading()\r\n            await window.showModal({\r\n                view: networkError\r\n            })\r\n\r\n            return\r\n        }\r\n\r\n        throw error\r\n    }\r\n\r\n}\r\n\r\nexport async function get(targetURL, params, isJSON = true) {\r\n    let url = `${BASE_URL}/${targetURL}`\r\n    params && (url += `?${toString(params)}`)\r\n    console.log('get', url)\r\n    return await request(url, defaultGET, isJSON)\r\n}\r\n\r\nexport async function post(targetURL, params = {}, isJSON = true) {\r\n    let url = `${BASE_URL}/${targetURL}`\r\n    console.log('post', url, params)\r\n    let setting = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(params)\r\n    }\r\n    return await request(url, setting, isJSON)\r\n}\r\n\r\n//bind to window for test\r\nwindow.get = get\r\nwindow.post = post\r\n"]},"metadata":{},"sourceType":"module"}