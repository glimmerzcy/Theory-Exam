{"ast":null,"code":"Array.prototype.shuffle = function () {\n  return this.sort(function () {\n    return Math.random() - .5;\n  });\n};\n\nArray.prototype.unlucky = function () {\n  return this[Math.floor(Math.random() * this.length)];\n};\n\nArray.prototype.transpose = function () {\n  var _this = this;\n\n  return this[0].map(function (col, j) {\n    return _this.map(function (row) {\n      return row[j];\n    });\n  });\n};\n\nArray.prototype.mutiply = function (matrix) {\n  var result = [];\n  var m = this[0].length;\n  var n = matrix.length;\n  var l = this.length;\n\n  for (var j = 0; j < n; j++) {\n    result[j] = [];\n\n    for (var i = 0; i < m; i++) {\n      result[j][i] = 0;\n\n      for (var k = 0; k < l; k++) {\n        result[j][i] += this[k][i] * matrix[j][k];\n      }\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:\\Users\\sunli\\Documents\\GitHub\\Theory-Exam\\code\\client\\src\\utils\\Matrix.js"],"names":["Array","prototype","shuffle","sort","Math","random","unlucky","floor","length","transpose","map","col","j","row","mutiply","matrix","result","m","n","l","i","k"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,GAA0B,YAAY;AACpC,SAAO,KAAKC,IAAL,CAAU;AAAA,WAAMC,IAAI,CAACC,MAAL,KAAgB,EAAtB;AAAA,GAAV,CAAP;AACD,CAFD;;AAIAL,KAAK,CAACC,SAAN,CAAgBK,OAAhB,GAA0B,YAAY;AACpC,SAAO,KAAKF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,MAAL,KAAgB,KAAKG,MAAhC,CAAL,CAAP;AACD,CAFD;;AAIAR,KAAK,CAACC,SAAN,CAAgBQ,SAAhB,GAA4B,YAAY;AAAA;;AACtC,SAAO,KAAK,CAAL,EAAQC,GAAR,CAAY,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAY,KAAI,CAACF,GAAL,CAAS,UAAAG,GAAG;AAAA,aAAIA,GAAG,CAACD,CAAD,CAAP;AAAA,KAAZ,CAAZ;AAAA,GAAZ,CAAP;AACD,CAFD;;AAIAZ,KAAK,CAACC,SAAN,CAAgBa,OAAhB,GAA0B,UAAUC,MAAV,EAAkB;AAC1C,MAAIC,MAAM,GAAG,EAAb;AACA,MAAMC,CAAC,GAAG,KAAK,CAAL,EAAQT,MAAlB;AACA,MAAMU,CAAC,GAAGH,MAAM,CAACP,MAAjB;AACA,MAAMW,CAAC,GAAG,KAAKX,MAAf;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,CAApB,EAAuBN,CAAC,EAAxB,EAA4B;AAC1BI,IAAAA,MAAM,CAACJ,CAAD,CAAN,GAAY,EAAZ;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1BJ,MAAAA,MAAM,CAACJ,CAAD,CAAN,CAAUQ,CAAV,IAAe,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB;AACEL,QAAAA,MAAM,CAACJ,CAAD,CAAN,CAAUQ,CAAV,KAAgB,KAAKC,CAAL,EAAQD,CAAR,IAAaL,MAAM,CAACH,CAAD,CAAN,CAAUS,CAAV,CAA7B;AADF;AAED;AACF;;AACD,SAAOL,MAAP;AACD,CAdD","sourcesContent":["Array.prototype.shuffle = function () {\r\n  return this.sort(() => Math.random() - .5)\r\n}\r\n\r\nArray.prototype.unlucky = function () {\r\n  return this[Math.floor(Math.random() * this.length)]\r\n}\r\n\r\nArray.prototype.transpose = function () {\r\n  return this[0].map((col, j) => this.map(row => row[j]))\r\n}\r\n\r\nArray.prototype.mutiply = function (matrix) {\r\n  let result = []\r\n  const m = this[0].length\r\n  const n = matrix.length\r\n  const l = this.length\r\n  for (let j = 0; j < n; j++) {\r\n    result[j] = []\r\n    for (let i = 0; i < m; i++) {\r\n      result[j][i] = 0\r\n      for (let k = 0; k < l; k++)\r\n        result[j][i] += this[k][i] * matrix[j][k]\r\n    }\r\n  }\r\n  return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}